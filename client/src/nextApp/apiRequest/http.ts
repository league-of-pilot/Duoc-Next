import envConfig from '@/nextApp/config'
import {
  EntityError,
  EntityErrorPayload,
  HttpError
} from '@/nextApp/nextApp.type'
import { redirect } from 'next/navigation'
import {
  AUTHENTICATION_ERROR_STATUS,
  ENTITY_ERROR_STATUS,
  NEXT_API
} from '../api.const'
import { isClient } from '../nextApp.utils'
import { ROUTE_PATH } from '../route.const'
import { LoginResType } from './auth.schema'
import { normalizePath } from './fetch.utils'

type CustomOptions = Omit<RequestInit, 'method'> & {
  baseUrl?: string
}

// √Ω t∆∞·ªüng nh∆∞ ki·ªÉu useRef, ƒë·ªÉ track khi logout ƒëang g·ªçi, -> ko g·ªçi th√™m
let clientLogoutRequest: null | Promise<any> = null

// private request
const request = async <Response>(
  method: 'GET' | 'POST' | 'PUT' | 'DELETE',
  url: string,
  options?: CustomOptions | undefined
) => {
  let body: FormData | string | undefined = undefined
  if (options?.body instanceof FormData) {
    body = options.body
  } else if (options?.body) {
    body = JSON.stringify(options.body)
  }

  const baseHeaders: {
    [key: string]: string
  } =
    body instanceof FormData
      ? {}
      : {
          'Content-Type': 'application/json'
        }

  if (isClient()) {
    const sessionToken = localStorage.getItem('sessionToken')
    if (sessionToken) {
      baseHeaders.Authorization = `Bearer ${sessionToken}`
    }
  }
  // N·∫øu kh√¥ng truy·ªÅn baseUrl (ho·∫∑c baseUrl = undefined) th√¨ l·∫•y t·ª´ envConfig.NEXT_PUBLIC_API_ENDPOINT
  // N·∫øu truy·ªÅn baseUrl th√¨ l·∫•y gi√° tr·ªã truy·ªÅn v√†o, truy·ªÅn v√†o '' th√¨ ƒë·ªìng nghƒ©a v·ªõi vi·ªác ch√∫ng ta g·ªçi API ƒë·∫øn Next.js Server
  const baseUrl =
    options?.baseUrl === undefined
      ? envConfig.NEXT_PUBLIC_API_ENDPOINT
      : options.baseUrl

  const fullUrl = url.startsWith('/') ? `${baseUrl}${url}` : `${baseUrl}/${url}`

  const res = await fetch(fullUrl, {
    ...options,
    headers: {
      ...baseHeaders,
      ...options?.headers
    },
    body,
    method
  })

  const payload: Response = await res.json()
  const data = {
    status: res.status,
    payload
  }
  if (!res.ok) {
    if (res.status === ENTITY_ERROR_STATUS) {
      throw new EntityError(
        data as {
          status: 422
          payload: EntityErrorPayload
        }
      )
      // V√¨ http d√πng chung cho c·∫£ client v√† server n√™n code ph·∫£i x√©t ·ªü c·∫£ 2 TH
      // Ph·ª©c t·∫°p c·ª±c k√¨, code r·ªëi th√™m logic m√† ko th·∫≠t s·ª± ƒë·∫°t performace cao
      // handle force logout ngay trong http gi·ªëng nh∆∞ 1 ki·ªÉu interceptor
    } else if (res.status === AUTHENTICATION_ERROR_STATUS) {
      // c√≥ 2 case thi api logout tu·ª≥ thu·ªôc n∆°i g·ªçi m√† s·∫Ω h·ª©ng set-Cookie
      // N·∫øu t·ª´ sv g·ªçi ti·∫øp th√¨ li·ªáu c√≥ forward set-Cookie ƒë∆∞·ª£c kh√¥ng?
      if (isClient()) {
        // client g·ªçi tr·ª±c ti·∫øp v√†o sv BE -> middleware g·ªçi ng·∫ßm sv FE
        // force logout ·ªü client -> check comment trong api Next server client
        // copy dup code ·ªü ƒë√¢y v√¨ ko mu·ªën circular, h∆°i d·ªü
        clientLogoutRequest = fetch(NEXT_API.AUTH_LOGOUT, {
          method: 'POST',
          body: JSON.stringify({ force: true }),
          headers: {
            ...baseHeaders
          }
        })
        try {
          await clientLogoutRequest
        } catch (error) {
          console.log('üöÄ http L106-error', error)
        } finally {
          localStorage.removeItem('sessionToken')
          localStorage.removeItem('sessionTokenExpiresAt')

          // reset flag
          clientLogoutRequest = null
          location.href = ROUTE_PATH.LOGIN
        }
      } else {
        // logout ·ªü server
        // sv FE g·ªçi 1 api BE, b·ªã tr·∫£ 401 -> redirect v·ªÅ route logout
        // N·∫øu ko mu·ªën trung gian ph·∫£i forward set-Cookie v·ªÅ client
        // Ho·∫∑c redirect client v·ªÅ route logout ng·∫ßm, sau ƒë√≥ client l·∫°i th√¥ng qua useEffect g·ªçi sv ƒë·ªÉ xo√° cookie -> l√≤ng v√≤ng
        // V√¨ route BE ko t·ª± set-Cookie d√πm
        const sessionToken = (options?.headers as any)?.Authorization.split(
          'Bearer '
        )[1]
        redirect(`/logout?sessionToken=${sessionToken}`)
        // √ù t∆∞·ªüng l√† ngay ƒë√¢y server next s·∫Ω g·ªçi b√°o BE logout, r·ªìi tr·∫£ Response header cho client lu√¥n
        // V√¨ code n√†y ch·∫°y 2 n·ª£i n√™n truy c·∫≠p v√†o Response ƒë∆∞·ª£c
        // return Response.json(
        //   {
        //     headers: {
        //       'Set-Cookie': `sessionToken=; Path=/; HttpOnly; Max-Age=0`
        //     }
        //   }
        // )
      }
    } else {
      // Ch·ªó n√†y c·∫ßn BE handle code chu·∫©n, hi·ªán ch·ªâ handle 422 zod
      throw new HttpError(data)
    }
  }

  // Cheat interceptor, t·∫°m ch·∫•p nh·∫≠n, ti·ªán set cookie v√†o obj clientSessionToken
  // V√¨ utils n√†y d√πng ·ªü c·∫£ server v√† client n√™n c·∫ßn check DK
  if (isClient()) {
    if (
      ['auth/login', 'auth/register'].some(item => item === normalizePath(url))
    ) {
      const { token, expiresAt } = (payload as LoginResType).data
      localStorage.setItem('sessionToken', token)
      localStorage.setItem('sessionTokenExpiresAt', expiresAt)
    } else if ('auth/logout' === normalizePath(url)) {
      localStorage.removeItem('sessionToken')
      localStorage.removeItem('sessionTokenExpiresAt')
    }
  }

  return data
}

export const http = {
  get<Response>(
    url: string,
    options?: Omit<CustomOptions, 'body'> | undefined
  ) {
    return request<Response>('GET', url, options)
  },
  post<Response>(
    url: string,
    body: any,
    options?: Omit<CustomOptions, 'body'> | undefined
  ) {
    return request<Response>('POST', url, { ...options, body })
  },
  put<Response>(
    url: string,
    body: any,
    options?: Omit<CustomOptions, 'body'> | undefined
  ) {
    return request<Response>('PUT', url, { ...options, body })
  },
  delete<Response>(
    url: string,
    options?: Omit<CustomOptions, 'body'> | undefined
  ) {
    return request<Response>('DELETE', url, { ...options })
  }
}
